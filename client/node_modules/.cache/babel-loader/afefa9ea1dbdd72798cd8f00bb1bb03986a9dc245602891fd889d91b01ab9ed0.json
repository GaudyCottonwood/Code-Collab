{"ast":null,"code":"var _jsxFileName = \"C:\\\\Rohin_Gaudycottonwood\\\\college_personal\\\\projects\\\\Code-Collab\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\nimport Editor from '@monaco-editor/react';\nimport SimpleEditor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/themes/prism.css'; // Or your preferred Prism theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_PORT = 3001;\nconst SERVER_URL = `${window.location.protocol}//${window.location.hostname}:${SERVER_PORT}`;\nconst socket = io(SERVER_URL);\nconst ROOM = 'default'; // You could make this dynamic if needed\n\n// Default code snippets for each language\nconst defaultSnippets = {\n  python: '# Write Python code here\\nprint(\"Hello, Python World!\")',\n  javascript: '// Write JavaScript code here\\nconsole.log(\"Hello, JavaScript World!\");',\n  c: '// Write C code here\\n#include <stdio.h>\\n\\nint main() {\\n  printf(\"Hello, C World!\\\\n\");\\n  return 0;\\n}'\n};\nexport default function App() {\n  _s();\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [running, setRunning] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [dragging, setDragging] = useState(false);\n  const [language, setLanguage] = useState('python'); // Default language\n  const [serverIp, setServerIp] = useState('localhost'); // To display connection info\n\n  const fileInputRef = useRef(null);\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  useEffect(() => {\n    // Join the room on component mount\n    socket.emit('join', ROOM);\n\n    // Handle initial state from server\n    socket.on('init', ({\n      code: initialCode,\n      ip,\n      roomLanguage\n    }) => {\n      setServerIp(ip);\n      const currentLang = roomLanguage || language;\n      setLanguage(currentLang); // Sync with room's current language\n\n      let displayCode = `# Connect at http://${ip}:${window.location.port || 3000}\\n# Language: ${currentLang}\\n\\n`;\n      if (initialCode) {\n        displayCode += initialCode;\n      } else {\n        displayCode += defaultSnippets[currentLang] || `// Code for ${currentLang}`;\n      }\n      setCode(displayCode);\n    });\n\n    // Handle code updates from other clients\n    socket.on('code', updatedCode => {\n      // This might need to be smarter if different users have different languages selected\n      // For now, it just updates the current editor's content.\n      setCode(prevCode => {\n        // Preserve header lines if they exist\n        const headerMatch = prevCode.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\n        const header = headerMatch ? headerMatch[0] : '';\n        return header + updatedCode;\n      });\n    });\n\n    // Handle output from code execution\n    socket.on('output', data => setOutput(prev => prev + data));\n    socket.on('done', () => setRunning(false));\n\n    // Handle file list updates\n    socket.on('file-list', fileList => setFiles(fileList));\n\n    // Handle room language changes initiated by other clients or server\n    socket.on('roomLanguageChanged', ({\n      language: newLanguage,\n      code: newCode\n    }) => {\n      setLanguage(newLanguage);\n      // Update code, preserving header\n      const header = `# Connect at http://${serverIp}:${window.location.port || 3000}\\n# Language: ${newLanguage}\\n\\n`;\n      setCode(header + (newCode || defaultSnippets[newLanguage] || `// Code for ${newLanguage}`));\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      socket.off('init');\n      socket.off('code');\n      socket.off('output');\n      socket.off('done');\n      socket.off('file-list');\n      socket.off('roomLanguageChanged');\n      // Consider whether to disconnect or leave room based on app flow\n      // socket.emit('leave', ROOM); // Example: if you implement room leaving\n      // socket.disconnect(); // If App unmount means full disconnection\n    };\n  }, [language, serverIp]); // Add language and serverIp to dependencies if they affect effect logic directly\n\n  // Handles changes in the Monaco editor or SimpleEditor\n  const handleEditorChange = value => {\n    // Extract only the editable code part, excluding header\n    const headerMatch = value.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\n    const codeOnly = headerMatch ? value.substring(headerMatch[0].length) : value;\n    setCode(value); // Update local state immediately for responsiveness\n    socket.emit('code', {\n      room: ROOM,\n      value: codeOnly,\n      language: language\n    });\n  };\n\n  // Runs the code\n  const runCode = () => {\n    setOutput(''); // Clear previous output\n    setRunning(true);\n    // Extract only the editable code part for execution\n    const headerMatch = code.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\n    const codeToRun = headerMatch ? code.substring(headerMatch[0].length) : code;\n    socket.emit('compile', {\n      room: ROOM,\n      language: language,\n      code: codeToRun\n    });\n  };\n\n  // Handles file uploads\n  const uploadFile = async file => {\n    if (!file) return;\n    const form = new FormData();\n    form.append('file', file);\n    try {\n      await fetch(`${SERVER_URL}/upload`, {\n        method: 'POST',\n        body: form\n      });\n      if (fileInputRef.current) fileInputRef.current.value = ''; // Clear file input\n    } catch (err) {\n      console.error('Upload failed', err);\n      setOutput(prev => prev + `Error uploading file: ${err.message}\\n`);\n    }\n  };\n\n  // Handles file input change\n  const onFileInputChange = e => {\n    const file = e.target.files && e.target.files[0];\n    if (file) uploadFile(file);\n  };\n\n  // Clears all shared files on the server\n  const clearFiles = async () => {\n    try {\n      await fetch(`${SERVER_URL}/clear-files`, {\n        method: 'DELETE'\n      });\n      setOutput(''); // Optionally clear output panel\n    } catch (err) {\n      console.error('Clear files failed', err);\n      setOutput(prev => prev + `Error clearing files: ${err.message}\\n`);\n    }\n  };\n\n  // Drag and drop handlers\n  const handleDragOver = e => {\n    e.preventDefault();\n    setDragging(true);\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    setDragging(false);\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    setDragging(false);\n    const file = e.dataTransfer.files && e.dataTransfer.files[0];\n    if (file) uploadFile(file);\n  };\n\n  // Syntax highlighting for SimpleEditor (mobile)\n  const highlightCode = codeToHighlight => {\n    let langDefinition;\n    switch (language) {\n      case 'javascript':\n        langDefinition = languages.javascript;\n        break;\n      case 'c':\n        langDefinition = languages.c;\n        break;\n      case 'python':\n      default:\n        langDefinition = languages.python;\n        break;\n    }\n    // PrismJS might not have the language definition if not imported\n    // or if the language string doesn't match.\n    if (langDefinition) {\n      return highlight(codeToHighlight, langDefinition, language);\n    }\n    return codeToHighlight; // Fallback: no highlighting\n  };\n\n  // Handles language change from the dropdown\n  const handleLanguageChange = newLanguage => {\n    setLanguage(newLanguage);\n    const header = `# Connect at http://${serverIp}:${window.location.port || 3000}\\n# Language: ${newLanguage}\\n\\n`;\n    const newDefaultCode = defaultSnippets[newLanguage] || `// Code for ${newLanguage}`;\n    const fullCode = header + newDefaultCode;\n    setCode(fullCode); // Update editor with new language's default code\n    setOutput(''); // Clear output when language changes\n\n    // Notify server about the language change for the room\n    if (socket.connected) {\n      socket.emit('languageChange', {\n        room: ROOM,\n        language: newLanguage,\n        defaultCode: newDefaultCode // Send default code for the new language\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-split\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-pane\",\n        children: isMobile ? /*#__PURE__*/_jsxDEV(SimpleEditor, {\n          value: code,\n          onValueChange: handleEditorChange // Already sends full code, server will strip header\n          ,\n          highlight: highlightCode,\n          padding: 12,\n          style: {\n            width: '100%',\n            height: '100%',\n            fontFamily: 'monospace',\n            fontSize: 14,\n            border: '1px solid #333',\n            // Basic styling\n            overflow: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Editor, {\n          height: \"100%\",\n          language: language // Monaco uses this to enable language-specific features\n          ,\n          value: code,\n          onChange: handleEditorChange // Already sends full code\n          ,\n          theme: \"vs-dark\" // Standard dark theme for Monaco\n          ,\n          options: {\n            wordWrap: 'on',\n            // Enable word wrap\n            minimap: {\n              enabled: true\n            },\n            fontSize: 14\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-pane\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: language,\n        onChange: e => handleLanguageChange(e.target.value),\n        className: \"language-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"javascript\",\n          children: \"JavaScript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"c\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runCode,\n        disabled: running,\n        className: \"run-button\",\n        children: running ? '…Running' : 'Run'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        ref: fileInputRef,\n        onChange: onFileInputChange,\n        style: {\n          display: 'none'\n        },\n        id: \"fileUploadInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fileInputRef.current && fileInputRef.current.click(),\n        className: \"upload-button\",\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearFiles,\n        className: \"clear-button\",\n        children: \"Clear Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `shared-files${dragging ? ' drag-over' : ''}`,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Shared Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), files.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files shared yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: files.map((f, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${SERVER_URL}${f.url}`,\n            download: f.originalname,\n            children: f.originalname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"drop-hint\",\n        children: dragging ? 'Release to upload' : 'Drag & drop a file here, or use the upload button above'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/F56hVm5DKZ5jxX1kXJPivYFbdw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","Editor","SimpleEditor","highlight","languages","jsxDEV","_jsxDEV","SERVER_PORT","SERVER_URL","window","location","protocol","hostname","socket","ROOM","defaultSnippets","python","javascript","c","App","_s","code","setCode","output","setOutput","running","setRunning","files","setFiles","dragging","setDragging","language","setLanguage","serverIp","setServerIp","fileInputRef","isMobile","test","navigator","userAgent","emit","on","initialCode","ip","roomLanguage","currentLang","displayCode","port","updatedCode","prevCode","headerMatch","match","header","data","prev","fileList","newLanguage","newCode","off","handleEditorChange","value","codeOnly","substring","length","room","runCode","codeToRun","uploadFile","file","form","FormData","append","fetch","method","body","current","err","console","error","message","onFileInputChange","e","target","clearFiles","handleDragOver","preventDefault","handleDragLeave","handleDrop","dataTransfer","highlightCode","codeToHighlight","langDefinition","handleLanguageChange","newDefaultCode","fullCode","connected","defaultCode","className","children","onValueChange","padding","style","width","height","fontFamily","fontSize","border","overflow","fileName","_jsxFileName","lineNumber","columnNumber","onChange","theme","options","wordWrap","minimap","enabled","onClick","disabled","type","ref","display","id","click","onDragOver","onDragLeave","onDrop","map","f","i","href","url","download","originalname","_c","$RefreshReg$"],"sources":["C:/Rohin_Gaudycottonwood/college_personal/projects/Code-Collab/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport io from 'socket.io-client';\r\nimport Editor from '@monaco-editor/react';\r\nimport SimpleEditor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-python';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-c';\r\nimport 'prismjs/themes/prism.css'; // Or your preferred Prism theme\r\n\r\nconst SERVER_PORT = 3001;\r\nconst SERVER_URL = `${window.location.protocol}//${window.location.hostname}:${SERVER_PORT}`;\r\nconst socket = io(SERVER_URL);\r\nconst ROOM = 'default'; // You could make this dynamic if needed\r\n\r\n// Default code snippets for each language\r\nconst defaultSnippets = {\r\n  python: '# Write Python code here\\nprint(\"Hello, Python World!\")',\r\n  javascript: '// Write JavaScript code here\\nconsole.log(\"Hello, JavaScript World!\");',\r\n  c: '// Write C code here\\n#include <stdio.h>\\n\\nint main() {\\n  printf(\"Hello, C World!\\\\n\");\\n  return 0;\\n}',\r\n};\r\n\r\nexport default function App() {\r\n  const [code, setCode] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [running, setRunning] = useState(false);\r\n  const [files, setFiles] = useState([]);\r\n  const [dragging, setDragging] = useState(false);\r\n  const [language, setLanguage] = useState('python'); // Default language\r\n  const [serverIp, setServerIp] = useState('localhost'); // To display connection info\r\n\r\n  const fileInputRef = useRef(null);\r\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n  useEffect(() => {\r\n    // Join the room on component mount\r\n    socket.emit('join', ROOM);\r\n\r\n    // Handle initial state from server\r\n    socket.on('init', ({ code: initialCode, ip, roomLanguage }) => {\r\n      setServerIp(ip);\r\n      const currentLang = roomLanguage || language;\r\n      setLanguage(currentLang); // Sync with room's current language\r\n\r\n      let displayCode = `# Connect at http://${ip}:${window.location.port || 3000}\\n# Language: ${currentLang}\\n\\n`;\r\n      if (initialCode) {\r\n        displayCode += initialCode;\r\n      } else {\r\n        displayCode += defaultSnippets[currentLang] || `// Code for ${currentLang}`;\r\n      }\r\n      setCode(displayCode);\r\n    });\r\n\r\n    // Handle code updates from other clients\r\n    socket.on('code', (updatedCode) => {\r\n      // This might need to be smarter if different users have different languages selected\r\n      // For now, it just updates the current editor's content.\r\n      setCode(prevCode => {\r\n        // Preserve header lines if they exist\r\n        const headerMatch = prevCode.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\r\n        const header = headerMatch ? headerMatch[0] : '';\r\n        return header + updatedCode;\r\n      });\r\n    });\r\n\r\n    // Handle output from code execution\r\n    socket.on('output', (data) => setOutput((prev) => prev + data));\r\n    socket.on('done', () => setRunning(false));\r\n\r\n    // Handle file list updates\r\n    socket.on('file-list', (fileList) => setFiles(fileList));\r\n\r\n    // Handle room language changes initiated by other clients or server\r\n    socket.on('roomLanguageChanged', ({ language: newLanguage, code: newCode }) => {\r\n      setLanguage(newLanguage);\r\n      // Update code, preserving header\r\n      const header = `# Connect at http://${serverIp}:${window.location.port || 3000}\\n# Language: ${newLanguage}\\n\\n`;\r\n      setCode(header + (newCode || defaultSnippets[newLanguage] || `// Code for ${newLanguage}`));\r\n    });\r\n\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      socket.off('init');\r\n      socket.off('code');\r\n      socket.off('output');\r\n      socket.off('done');\r\n      socket.off('file-list');\r\n      socket.off('roomLanguageChanged');\r\n      // Consider whether to disconnect or leave room based on app flow\r\n      // socket.emit('leave', ROOM); // Example: if you implement room leaving\r\n      // socket.disconnect(); // If App unmount means full disconnection\r\n    };\r\n  }, [language, serverIp]); // Add language and serverIp to dependencies if they affect effect logic directly\r\n\r\n  // Handles changes in the Monaco editor or SimpleEditor\r\n  const handleEditorChange = (value) => {\r\n    // Extract only the editable code part, excluding header\r\n    const headerMatch = value.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\r\n    const codeOnly = headerMatch ? value.substring(headerMatch[0].length) : value;\r\n\r\n    setCode(value); // Update local state immediately for responsiveness\r\n    socket.emit('code', { room: ROOM, value: codeOnly, language: language });\r\n  };\r\n\r\n  // Runs the code\r\n  const runCode = () => {\r\n    setOutput(''); // Clear previous output\r\n    setRunning(true);\r\n    // Extract only the editable code part for execution\r\n    const headerMatch = code.match(/^# Connect at.*\\n# Language:.*\\n\\n/);\r\n    const codeToRun = headerMatch ? code.substring(headerMatch[0].length) : code;\r\n    socket.emit('compile', { room: ROOM, language: language, code: codeToRun });\r\n  };\r\n\r\n  // Handles file uploads\r\n  const uploadFile = async (file) => {\r\n    if (!file) return;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    try {\r\n      await fetch(`${SERVER_URL}/upload`, { method: 'POST', body: form });\r\n      if (fileInputRef.current) fileInputRef.current.value = ''; // Clear file input\r\n    } catch (err) {\r\n      console.error('Upload failed', err);\r\n      setOutput((prev) => prev + `Error uploading file: ${err.message}\\n`);\r\n    }\r\n  };\r\n\r\n  // Handles file input change\r\n  const onFileInputChange = (e) => {\r\n    const file = e.target.files && e.target.files[0];\r\n    if (file) uploadFile(file);\r\n  };\r\n\r\n  // Clears all shared files on the server\r\n  const clearFiles = async () => {\r\n    try {\r\n      await fetch(`${SERVER_URL}/clear-files`, { method: 'DELETE' });\r\n      setOutput(''); // Optionally clear output panel\r\n    } catch (err) {\r\n      console.error('Clear files failed', err);\r\n      setOutput((prev) => prev + `Error clearing files: ${err.message}\\n`);\r\n    }\r\n  };\r\n\r\n  // Drag and drop handlers\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    setDragging(true);\r\n  };\r\n  const handleDragLeave = (e) => {\r\n    e.preventDefault();\r\n    setDragging(false);\r\n  };\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    setDragging(false);\r\n    const file = e.dataTransfer.files && e.dataTransfer.files[0];\r\n    if (file) uploadFile(file);\r\n  };\r\n\r\n  // Syntax highlighting for SimpleEditor (mobile)\r\n  const highlightCode = (codeToHighlight) => {\r\n    let langDefinition;\r\n    switch (language) {\r\n      case 'javascript':\r\n        langDefinition = languages.javascript;\r\n        break;\r\n      case 'c':\r\n        langDefinition = languages.c;\r\n        break;\r\n      case 'python':\r\n      default:\r\n        langDefinition = languages.python;\r\n        break;\r\n    }\r\n    // PrismJS might not have the language definition if not imported\r\n    // or if the language string doesn't match.\r\n    if (langDefinition) {\r\n      return highlight(codeToHighlight, langDefinition, language);\r\n    }\r\n    return codeToHighlight; // Fallback: no highlighting\r\n  };\r\n\r\n  // Handles language change from the dropdown\r\n  const handleLanguageChange = (newLanguage) => {\r\n    setLanguage(newLanguage);\r\n    const header = `# Connect at http://${serverIp}:${window.location.port || 3000}\\n# Language: ${newLanguage}\\n\\n`;\r\n    const newDefaultCode = defaultSnippets[newLanguage] || `// Code for ${newLanguage}`;\r\n    const fullCode = header + newDefaultCode;\r\n    setCode(fullCode); // Update editor with new language's default code\r\n    setOutput(''); // Clear output when language changes\r\n\r\n    // Notify server about the language change for the room\r\n    if (socket.connected) {\r\n      socket.emit('languageChange', {\r\n        room: ROOM,\r\n        language: newLanguage,\r\n        defaultCode: newDefaultCode, // Send default code for the new language\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top-split\">\r\n        <div className=\"editor-pane\">\r\n          {isMobile ? (\r\n            <SimpleEditor\r\n              value={code}\r\n              onValueChange={handleEditorChange} // Already sends full code, server will strip header\r\n              highlight={highlightCode}\r\n              padding={12}\r\n              style={{\r\n                width: '100%',\r\n                height: '100%',\r\n                fontFamily: 'monospace',\r\n                fontSize: 14,\r\n                border: '1px solid #333', // Basic styling\r\n                overflow: 'auto'\r\n              }}\r\n            />\r\n          ) : (\r\n            <Editor\r\n              height=\"100%\"\r\n              language={language} // Monaco uses this to enable language-specific features\r\n              value={code}\r\n              onChange={handleEditorChange} // Already sends full code\r\n              theme=\"vs-dark\" // Standard dark theme for Monaco\r\n              options={{\r\n                wordWrap: 'on', // Enable word wrap\r\n                minimap: { enabled: true },\r\n                fontSize: 14,\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"output-pane\">\r\n          <pre>{output}</pre>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"controls\">\r\n        <select value={language} onChange={(e) => handleLanguageChange(e.target.value)} className=\"language-selector\">\r\n          <option value=\"python\">Python</option>\r\n          <option value=\"javascript\">JavaScript</option>\r\n          <option value=\"c\">C</option>\r\n          {/* Add more languages here and update defaultSnippets and server logic */}\r\n        </select>\r\n        <button onClick={runCode} disabled={running} className=\"run-button\">\r\n          {running ? '…Running' : 'Run'}\r\n        </button>\r\n        <input type=\"file\" ref={fileInputRef} onChange={onFileInputChange} style={{ display: 'none' }} id=\"fileUploadInput\" />\r\n        <button onClick={() => fileInputRef.current && fileInputRef.current.click()} className=\"upload-button\">\r\n          Upload File\r\n        </button>\r\n        <button onClick={clearFiles} className=\"clear-button\">\r\n          Clear Files\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className={`shared-files${dragging ? ' drag-over' : ''}`}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        <h4>Shared Files</h4>\r\n        {files.length === 0 ? (\r\n          <p>No files shared yet.</p>\r\n        ) : (\r\n          <ul>\r\n            {files.map((f, i) => (\r\n              <li key={i}>\r\n                <a href={`${SERVER_URL}${f.url}`} download={f.originalname}>\r\n                  {f.originalname}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        <p className=\"drop-hint\">\r\n          {dragging\r\n            ? 'Release to upload'\r\n            : 'Drag & drop a file here, or use the upload button above'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}