{"ast":null,"code":"var _jsxFileName = \"C:\\\\Rohin_Gaudycottonwood\\\\college_personal\\\\projects\\\\Code-Collab\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './App.css'; // Assuming App.css contains global styles or styles for App.js\n\n// Global error handler for specific, known, non-critical errors.\n// It's generally better to handle errors within components using Error Boundaries\n// or to let React's development overlay show them.\n// Use this sparingly.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.addEventListener('error', e => {\n  const msg = e.message || '';\n  // Suppress ResizeObserver loop errors, which are common and usually benign in dev.\n  if (msg.includes('ResizeObserver loop') || msg.includes('Script error.') || msg.includes('Canceled')) {\n    // e.preventDefault(); // Be cautious with preventDefault on global errors\n    // e.stopImmediatePropagation(); // Be cautious with stopImmediatePropagation\n    console.warn('Suppressed known error:', msg); // Log it instead of silently ignoring\n  }\n});\nwindow.addEventListener('unhandledrejection', e => {\n  const reason = e.reason || {};\n  const msg = reason.message || String(reason);\n  if (msg.includes('Script error.') || msg.includes('Canceled')) {\n    // e.preventDefault();\n    // e.stopImmediatePropagation();\n    console.warn('Suppressed known unhandled rejection:', msg);\n  }\n});\nconst container = document.getElementById('root');\nif (container) {\n  const root = createRoot(container);\n  root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this));\n} else {\n  console.error(\"Fatal Error: The root element with ID 'root' was not found in your public/index.html. React cannot mount the application.\");\n  // You could display a message to the user on the page itself here if you want.\n  document.body.innerHTML = '<div style=\"padding: 20px; text-align: center; font-family: sans-serif;\"><h1>Application Error</h1><p>Could not find the root HTML element to launch the application. Please check the console.</p></div>';\n}","map":{"version":3,"names":["React","createRoot","App","jsxDEV","_jsxDEV","window","addEventListener","e","msg","message","includes","console","warn","reason","String","container","document","getElementById","root","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","error","body","innerHTML"],"sources":["C:/Rohin_Gaudycottonwood/college_personal/projects/Code-Collab/client/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './App';\r\nimport './App.css'; // Assuming App.css contains global styles or styles for App.js\r\n\r\n// Global error handler for specific, known, non-critical errors.\r\n// It's generally better to handle errors within components using Error Boundaries\r\n// or to let React's development overlay show them.\r\n// Use this sparingly.\r\nwindow.addEventListener('error', (e) => {\r\n  const msg = e.message || '';\r\n  // Suppress ResizeObserver loop errors, which are common and usually benign in dev.\r\n  if (msg.includes('ResizeObserver loop') || msg.includes('Script error.') || msg.includes('Canceled')) {\r\n    // e.preventDefault(); // Be cautious with preventDefault on global errors\r\n    // e.stopImmediatePropagation(); // Be cautious with stopImmediatePropagation\r\n    console.warn('Suppressed known error:', msg); // Log it instead of silently ignoring\r\n  }\r\n});\r\n\r\nwindow.addEventListener('unhandledrejection', (e) => {\r\n  const reason = e.reason || {};\r\n  const msg = reason.message || String(reason);\r\n  if (msg.includes('Script error.') || msg.includes('Canceled')) {\r\n    // e.preventDefault();\r\n    // e.stopImmediatePropagation();\r\n    console.warn('Suppressed known unhandled rejection:', msg);\r\n  }\r\n});\r\n\r\nconst container = document.getElementById('root');\r\n\r\nif (container) {\r\n  const root = createRoot(container);\r\n  root.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  );\r\n} else {\r\n  console.error(\r\n    \"Fatal Error: The root element with ID 'root' was not found in your public/index.html. React cannot mount the application.\"\r\n  );\r\n  // You could display a message to the user on the page itself here if you want.\r\n  document.body.innerHTML = '<div style=\"padding: 20px; text-align: center; font-family: sans-serif;\"><h1>Application Error</h1><p>Could not find the root HTML element to launch the application. Please check the console.</p></div>';\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,WAAW,CAAC,CAAC;;AAEpB;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;EACtC,MAAMC,GAAG,GAAGD,CAAC,CAACE,OAAO,IAAI,EAAE;EAC3B;EACA,IAAID,GAAG,CAACE,QAAQ,CAAC,qBAAqB,CAAC,IAAIF,GAAG,CAACE,QAAQ,CAAC,eAAe,CAAC,IAAIF,GAAG,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;IACpG;IACA;IACAC,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEJ,GAAG,CAAC,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;AAEFH,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAGC,CAAC,IAAK;EACnD,MAAMM,MAAM,GAAGN,CAAC,CAACM,MAAM,IAAI,CAAC,CAAC;EAC7B,MAAML,GAAG,GAAGK,MAAM,CAACJ,OAAO,IAAIK,MAAM,CAACD,MAAM,CAAC;EAC5C,IAAIL,GAAG,CAACE,QAAQ,CAAC,eAAe,CAAC,IAAIF,GAAG,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;IAC7D;IACA;IACAC,OAAO,CAACC,IAAI,CAAC,uCAAuC,EAAEJ,GAAG,CAAC;EAC5D;AACF,CAAC,CAAC;AAEF,MAAMO,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AAEjD,IAAIF,SAAS,EAAE;EACb,MAAMG,IAAI,GAAGjB,UAAU,CAACc,SAAS,CAAC;EAClCG,IAAI,CAACC,MAAM,cACTf,OAAA,CAACJ,KAAK,CAACoB,UAAU;IAAAC,QAAA,eACfjB,OAAA,CAACF,GAAG;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CACpB,CAAC;AACH,CAAC,MAAM;EACLd,OAAO,CAACe,KAAK,CACX,2HACF,CAAC;EACD;EACAV,QAAQ,CAACW,IAAI,CAACC,SAAS,GAAG,2MAA2M;AACvO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}